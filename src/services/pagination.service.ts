import { BrowserService } from './browser.service';
import { SELECTORS } from '@/constants';
import { PaginationResult } from '@/types';
import { adventureLogger } from '@/utils/logger';

export class PaginationService {
    constructor(private browserService: BrowserService) {}

    /**
     * Busca la siguiente p√°gina disponible
     */
    async findNextPage(currentPage: number): Promise<PaginationResult> {
        try {
            adventureLogger.pagination(`üîç Buscando siguiente p√°gina desde p√°gina ${currentPage}...`);

            // Buscar el contenedor de paginaci√≥n
            const contenedorPaginacion = await this.browserService.getElement(SELECTORS.PAGINATION.CONTAINER);

            if (!contenedorPaginacion) {
                adventureLogger.pagination(`‚ùå No se encontr√≥ contenedor de paginaci√≥n`);
                return { hasNextPage: false, currentPage };
            }

            // Buscar todos los botones de paginaci√≥n
            const botonesPaginacion = await contenedorPaginacion.$$(SELECTORS.PAGINATION.BUTTONS);

            if (!botonesPaginacion || botonesPaginacion.length === 0) {
                adventureLogger.pagination(`‚ùå No se encontraron botones de paginaci√≥n`);
                return { hasNextPage: false, currentPage };
            }

            adventureLogger.pagination(`üìã Analizando ${botonesPaginacion.length} botones de paginaci√≥n:`);

            // Analizar cada bot√≥n para encontrar el siguiente
            for (let i = 0; i < botonesPaginacion.length; i++) {
                const boton = botonesPaginacion[i];

                if (!boton) continue;

                const texto = await boton.textContent();
                const clases = await boton.evaluate(el => el.className);

                adventureLogger.debug(`üîç Bot√≥n ${i + 1}: "${texto}", clases: "${clases}"`);

                // Verificar si es el bot√≥n activo (p√°gina actual)
                const esActivo = this.isActiveButton(clases);

                // Buscar el siguiente n√∫mero de p√°gina
                const numeroPagina = parseInt(texto?.trim() || '0');

                if (!isNaN(numeroPagina) && numeroPagina > currentPage && !esActivo) {
                    adventureLogger.success(`‚úÖ Encontrado bot√≥n para p√°gina ${numeroPagina}`);
                    return {
                        hasNextPage: true,
                        nextPageButton: boton,
                        currentPage: numeroPagina
                    };
                }
            }

            adventureLogger.pagination(`‚ùå No se encontr√≥ bot√≥n v√°lido para p√°gina siguiente a ${currentPage}`);
            return { hasNextPage: false, currentPage };

        } catch (error) {
            adventureLogger.error(`‚ùå Error buscando siguiente p√°gina`, error);
            return { hasNextPage: false, currentPage };
        }
    }

    /**
     * Navega a la siguiente p√°gina
     */
    async navigateToNextPage(currentPage: number): Promise<{ success: boolean; newPage: number }> {
        const paginationResult = await this.findNextPage(currentPage);

        if (!paginationResult.hasNextPage || !paginationResult.nextPageButton) {
            return { success: false, newPage: currentPage };
        }

        try {
            const nextPageNumber = paginationResult.currentPage;

            adventureLogger.pagination(`‚û°Ô∏è Navegando a la p√°gina ${nextPageNumber}...`);

            // Click en el bot√≥n de siguiente p√°gina
            await paginationResult.nextPageButton.click();

            // Esperar a que la p√°gina se cargue
            await this.browserService.waitForNavigation();

            adventureLogger.success(`üìÑ Ahora en p√°gina ${nextPageNumber}`);

            return { success: true, newPage: nextPageNumber };

        } catch (error) {
            adventureLogger.error(`Error navegando a la siguiente p√°gina`, error);
            return { success: false, newPage: currentPage };
        }
    }

    /**
     * Verifica si hay p√°ginas disponibles sin navegar
     */
    async hasMorePages(currentPage: number): Promise<boolean> {
        const result = await this.findNextPage(currentPage);
        return result.hasNextPage;
    }

    /**
     * Obtiene informaci√≥n de todas las p√°ginas disponibles
     */
    async getAllAvailablePages(): Promise<number[]> {
        try {
            const contenedorPaginacion = await this.browserService.getElement(SELECTORS.PAGINATION.CONTAINER);

            if (!contenedorPaginacion) {
                return [];
            }

            const botonesPaginacion = await contenedorPaginacion.$$(SELECTORS.PAGINATION.BUTTONS);
            const paginas: number[] = [];

            for (const boton of botonesPaginacion) {
                const texto = await boton.textContent();
                const numeroPagina = parseInt(texto?.trim() || '0');

                if (!isNaN(numeroPagina) && numeroPagina > 0) {
                    paginas.push(numeroPagina);
                }
            }

            // Ordenar y remover duplicados
            const paginasUnicas = [...new Set(paginas)].sort((a, b) => a - b);

            adventureLogger.pagination(`üìã P√°ginas disponibles: [${paginasUnicas.join(', ')}]`);

            return paginasUnicas;

        } catch (error) {
            adventureLogger.error('Error obteniendo p√°ginas disponibles', error);
            return [];
        }
    }

    /**
     * Verifica si un bot√≥n est√° activo (p√°gina actual)
     */
    private isActiveButton(clases: string): boolean {
        return SELECTORS.PAGINATION.ACTIVE_CLASSES.some(activeClass =>
            clases.includes(activeClass)
        );
    }

    /**
     * Navega directamente a una p√°gina espec√≠fica
     */
    async navigateToPage(targetPage: number): Promise<{ success: boolean; currentPage: number }> {
        try {
            const contenedorPaginacion = await this.browserService.getElement(SELECTORS.PAGINATION.CONTAINER);

            if (!contenedorPaginacion) {
                return { success: false, currentPage: 1 };
            }

            const botonesPaginacion = await contenedorPaginacion.$$(SELECTORS.PAGINATION.BUTTONS);

            for (const boton of botonesPaginacion) {
                const texto = await boton.textContent();
                const numeroPagina = parseInt(texto?.trim() || '0');

                if (numeroPagina === targetPage) {
                    adventureLogger.pagination(`‚û°Ô∏è Navegando directamente a p√°gina ${targetPage}...`);

                    await boton.click();
                    await this.browserService.waitForNavigation();

                    adventureLogger.success(`üìÑ Navegaci√≥n exitosa a p√°gina ${targetPage}`);
                    return { success: true, currentPage: targetPage };
                }
            }

            adventureLogger.error(`‚ùå No se encontr√≥ bot√≥n para p√°gina ${targetPage}`);
            return { success: false, currentPage: 1 };

        } catch (error) {
            adventureLogger.error(`Error navegando a p√°gina ${targetPage}`, error);
            return { success: false, currentPage: 1 };
        }
    }

    /**
     * Obtiene el n√∫mero de p√°gina actual
     */
    async getCurrentPageNumber(): Promise<number> {
        try {
            const contenedorPaginacion = await this.browserService.getElement(SELECTORS.PAGINATION.CONTAINER);

            if (!contenedorPaginacion) {
                return 1;
            }

            const botonesPaginacion = await contenedorPaginacion.$$(SELECTORS.PAGINATION.BUTTONS);

            for (const boton of botonesPaginacion) {
                const texto = await boton.textContent();
                const clases = await boton.evaluate(el => el.className);

                if (this.isActiveButton(clases)) {
                    const numeroPagina = parseInt(texto?.trim() || '1');
                    if (!isNaN(numeroPagina)) {
                        return numeroPagina;
                    }
                }
            }

            return 1; // Default a p√°gina 1 si no se puede determinar

        } catch (error) {
            adventureLogger.error('Error obteniendo n√∫mero de p√°gina actual', error);
            return 1;
        }
    }

    /**
     * Verifica si estamos en la primera p√°gina
     */
    async isFirstPage(): Promise<boolean> {
        const currentPage = await this.getCurrentPageNumber();
        return currentPage === 1;
    }

    /**
     * Verifica si estamos en la √∫ltima p√°gina
     */
    async isLastPage(): Promise<boolean> {
        const currentPage = await this.getCurrentPageNumber();
        const hasNext = await this.hasMorePages(currentPage);
        return !hasNext;
    }
}